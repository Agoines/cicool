{"version":3,"sources":["rgbaster.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var getContext = function (width, height) {\n  var canvas = document.createElement('canvas');\n  canvas.setAttribute('width', width);\n  canvas.setAttribute('height', height);\n  return canvas.getContext('2d');\n};\nvar getImageData = function (src, scale) {\n  if ( scale === void 0 ) scale = 1;\n\n  var img = new Image();\n  if (!src.startsWith('data')) { img.crossOrigin = 'Anonymous'; }\n  return new Promise(function (resolve, reject) {\n    img.onload = function () {\n      var width = img.width * scale;\n      var height = img.height * scale;\n      var context = getContext(width, height);\n      context.drawImage(img, 0, 0, width, height);\n      var ref = context.getImageData(0, 0, width, height);\n      var data = ref.data;\n      resolve(data);\n    };\n\n    var errorHandler = function () { return reject(new Error('An error occurred attempting to load image')); };\n\n    img.onerror = errorHandler;\n    img.onabort = errorHandler;\n    img.src = src;\n  });\n};\nvar getCounts = function (data, ignore) {\n  var countMap = {};\n\n  for (var i = 0; i < data.length; i += 4) {\n    var alpha = data[i + 3];\n    if (alpha === 0) { continue; }\n    var rgbComponents = Array.from(data.subarray(i, i + 3));\n    if (rgbComponents.indexOf(undefined) !== -1) { continue; }\n    var color = alpha && alpha !== 255 ? (\"rgba(\" + (rgbComponents.concat( [alpha]).join(',')) + \")\") : (\"rgb(\" + (rgbComponents.join(',')) + \")\");\n    if (ignore.indexOf(color) !== -1) { continue; }\n\n    if (countMap[color]) {\n      countMap[color].count++;\n    } else {\n      countMap[color] = {\n        color: color,\n        count: 1\n      };\n    }\n  }\n\n  var counts = Object.values(countMap);\n  return counts.sort(function (a, b) { return b.count - a.count; });\n};\n\nvar defaultOpts = {\n  ignore: [],\n  scale: 1\n};\nvar index = (function (src, opts) {\n  if ( opts === void 0 ) opts = defaultOpts;\n\n  try {\n    opts = Object.assign({}, defaultOpts,\n      opts);\n    var ignore = opts.ignore;\n    var scale = opts.scale;\n\n    if (scale > 1 || scale <= 0) {\n      console.warn((\"You set scale to \" + scale + \", which isn't between 0-1. This is either pointless (> 1) or a no-op (â‰¤ 0)\"));\n    }\n\n    return Promise.resolve(getImageData(src, scale)).then(function (data) {\n      return getCounts(data, ignore);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n});\n\nmodule.exports = index;\n"]}